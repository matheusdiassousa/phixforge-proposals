import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { storage, Exploitation } from '@/lib/storage';
import { Trash2, Edit2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

export const ExploitationTab = () => {
  const [exploitations, setExploitations] = useState<Exploitation[]>([]);
  const [editing, setEditing] = useState<string | null>(null);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    targetedEndUsers: '',
    competitors: '',
    marketOverview: '',
    valueProposition: '',
    commercializationMeasures: '',
    additionalSupport: '',
    expectedRevenues: '',
  });
  const { toast } = useToast();

  useEffect(() => {
    loadExploitations();
  }, []);

  const loadExploitations = () => {
    setExploitations(storage.get<Exploitation>('exploitation'));
  };

  const handleSave = () => {
    if (!formData.name.trim()) {
      toast({ title: 'Name is required', variant: 'destructive' });
      return;
    }

    const updated = editing
      ? exploitations.map((e) => (e.id === editing ? { ...e, ...formData } : e))
      : [...exploitations, { id: crypto.randomUUID(), ...formData }];

    storage.set('exploitation', updated);
    setExploitations(updated);
    setEditing(null);
    setFormData({
      name: '',
      description: '',
      targetedEndUsers: '',
      competitors: '',
      marketOverview: '',
      valueProposition: '',
      commercializationMeasures: '',
      additionalSupport: '',
      expectedRevenues: '',
    });
    toast({ title: editing ? 'Exploitation updated' : 'Exploitation added' });
  };

  const handleDelete = (id: string) => {
    const updated = exploitations.filter((e) => e.id !== id);
    storage.set('exploitation', updated);
    setExploitations(updated);
    toast({ title: 'Exploitation deleted' });
  };

  const handleEdit = (exploitation: Exploitation) => {
    setEditing(exploitation.id);
    setFormData({
      name: exploitation.name,
      description: exploitation.description,
      targetedEndUsers: exploitation.targetedEndUsers || '',
      competitors: exploitation.competitors || '',
      marketOverview: exploitation.marketOverview || '',
      valueProposition: exploitation.valueProposition || '',
      commercializationMeasures: exploitation.commercializationMeasures || '',
      additionalSupport: exploitation.additionalSupport || '',
      expectedRevenues: exploitation.expectedRevenues || '',
    });
  };

  return (
    <div className="space-y-4 mt-4">
      <Card>
        <CardHeader>
          <CardTitle>{editing ? 'Edit Exploitation' : 'Add New Exploitation'}</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">Name of the exploitable foreground/product *</Label>
            <Input
              id="name"
              placeholder="Product or foreground name"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Short description</Label>
            <Textarea
              id="description"
              placeholder="Brief description of the exploitation"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              rows={3}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="targetedEndUsers">Targeted End Users and market/customer needs</Label>
            <Textarea
              id="targetedEndUsers"
              placeholder="Describe the target audience and their needs"
              value={formData.targetedEndUsers}
              onChange={(e) => setFormData({ ...formData, targetedEndUsers: e.target.value })}
              rows={3}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="competitors">Competitors</Label>
            <Textarea
              id="competitors"
              placeholder="List and describe main competitors"
              value={formData.competitors}
              onChange={(e) => setFormData({ ...formData, competitors: e.target.value })}
              rows={3}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="marketOverview">Market Overview</Label>
            <Textarea
              id="marketOverview"
              placeholder="Provide an overview of the market landscape"
              value={formData.marketOverview}
              onChange={(e) => setFormData({ ...formData, marketOverview: e.target.value })}
              rows={3}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="valueProposition">Value proposition</Label>
            <Textarea
              id="valueProposition"
              placeholder="Describe the unique value proposition"
              value={formData.valueProposition}
              onChange={(e) => setFormData({ ...formData, valueProposition: e.target.value })}
              rows={3}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="commercializationMeasures">Exploitation/commercialization measures (Tools, Activities, Timings, etc.)</Label>
            <Textarea
              id="commercializationMeasures"
              placeholder="Detail the commercialization strategy, tools, activities, and timeline"
              value={formData.commercializationMeasures}
              onChange={(e) => setFormData({ ...formData, commercializationMeasures: e.target.value })}
              rows={4}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="additionalSupport">Additional support/services beyond end of project</Label>
            <Textarea
              id="additionalSupport"
              placeholder="Describe support and services planned after project completion"
              value={formData.additionalSupport}
              onChange={(e) => setFormData({ ...formData, additionalSupport: e.target.value })}
              rows={3}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="expectedRevenues">Expected revenues (financial projections)</Label>
            <Textarea
              id="expectedRevenues"
              placeholder="Provide financial projections and expected revenues"
              value={formData.expectedRevenues}
              onChange={(e) => setFormData({ ...formData, expectedRevenues: e.target.value })}
              rows={3}
            />
          </div>

          <div className="flex gap-2">
            <Button onClick={handleSave}>
              {editing ? 'Update' : 'Add'}
            </Button>
            {editing && (
              <Button
                variant="outline"
                onClick={() => {
                  setEditing(null);
                  setFormData({
                    name: '',
                    description: '',
                    targetedEndUsers: '',
                    competitors: '',
                    marketOverview: '',
                    valueProposition: '',
                    commercializationMeasures: '',
                    additionalSupport: '',
                    expectedRevenues: '',
                  });
                }}
              >
                Cancel
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      <div className="grid gap-4">
        {exploitations.map((exploitation) => (
          <Card key={exploitation.id}>
            <CardHeader>
              <div className="flex justify-between items-start">
                <CardTitle className="text-lg">{exploitation.name}</CardTitle>
                <div className="flex gap-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => handleEdit(exploitation)}
                  >
                    <Edit2 className="h-4 w-4" />
                  </Button>
                  <Button
                    size="sm"
                    variant="destructive"
                    onClick={() => handleDelete(exploitation.id)}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {exploitation.description && (
                <div>
                  <h4 className="font-semibold text-sm mb-1">Description</h4>
                  <p className="text-sm text-muted-foreground">{exploitation.description}</p>
                </div>
              )}
              {exploitation.targetedEndUsers && (
                <div>
                  <h4 className="font-semibold text-sm mb-1">Targeted End Users</h4>
                  <p className="text-sm text-muted-foreground">{exploitation.targetedEndUsers}</p>
                </div>
              )}
              {exploitation.competitors && (
                <div>
                  <h4 className="font-semibold text-sm mb-1">Competitors</h4>
                  <p className="text-sm text-muted-foreground">{exploitation.competitors}</p>
                </div>
              )}
              {exploitation.marketOverview && (
                <div>
                  <h4 className="font-semibold text-sm mb-1">Market Overview</h4>
                  <p className="text-sm text-muted-foreground">{exploitation.marketOverview}</p>
                </div>
              )}
              {exploitation.valueProposition && (
                <div>
                  <h4 className="font-semibold text-sm mb-1">Value Proposition</h4>
                  <p className="text-sm text-muted-foreground">{exploitation.valueProposition}</p>
                </div>
              )}
              {exploitation.commercializationMeasures && (
                <div>
                  <h4 className="font-semibold text-sm mb-1">Commercialization Measures</h4>
                  <p className="text-sm text-muted-foreground">{exploitation.commercializationMeasures}</p>
                </div>
              )}
              {exploitation.additionalSupport && (
                <div>
                  <h4 className="font-semibold text-sm mb-1">Additional Support</h4>
                  <p className="text-sm text-muted-foreground">{exploitation.additionalSupport}</p>
                </div>
              )}
              {exploitation.expectedRevenues && (
                <div>
                  <h4 className="font-semibold text-sm mb-1">Expected Revenues</h4>
                  <p className="text-sm text-muted-foreground">{exploitation.expectedRevenues}</p>
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};